#!/usr/bin/env python3

# main entry point for mcps3rtm
# tbwcjw - MIT 2025
#
# handles setting up virtual environment
# usage: ./mcps3rtm [cli|server|desktop] [args]

import sys
import subprocess
import os
import venv
from pathlib import Path

VENV = ".msps3rtm"
REQUIREMENTS = "requirements.txt"
BASE_PATH = Path(__file__).resolve().parent 
python_executable = str(BASE_PATH / VENV / ("Scripts" if os.name == "nt" else "bin") / "python")

def get_script_path(relative_path):
    return str(BASE_PATH / relative_path)

def environment():
    requirements_path = BASE_PATH / REQUIREMENTS
    if not os.path.exists(BASE_PATH / VENV):
        print(f"Creating virtual environment in '{VENV}'...")
        venv.create(str(BASE_PATH / VENV), with_pip=True)

        print(f"Installing dependencies from {REQUIREMENTS}...")
        subprocess.check_call([python_executable, "-m", "pip", "install", "--upgrade", "pip"])
        if os.name == "nt":
            subprocess.check_call([python_executable, "-m", "pip", "install", "pywin32"])
        if requirements_path.exists():
            subprocess.check_call([python_executable, "-m", "pip", "install", "-r", str(requirements_path)])
        else:
            print(f"{requirements_path} not found, skipping installation.")
            sys.exit(1)

    return python_executable

def nt_desktop_entry():
    try:
        import win32com.client
    except ImportError:
        print("pywin32 is required to create a windows shortcut")
        sys.exit(1)

    desktop = Path.home() / "Desktop"
    base_path = BASE_PATH
    bat_path = base_path / "mcps3rtm_launcher.bat"
    shortcut_path = desktop / "MCPS3RTM.lnk"
    icon_path = base_path / "assets/favicon.ico"

    venv_python = base_path / VENV / "Scripts" / "python.exe"
    script_path = base_path / "mcps3rtm.py"

    with open(bat_path, "w") as f:
        f.write(f"""@echo off
cd /d "{base_path}"
"{venv_python}" "{script_path}" desktop %*
""")

    shell = win32com.client.Dispatch("WScript.Shell")
    shortcut = shell.CreateShortCut(str(shortcut_path))
    shortcut.Targetpath = str(bat_path)
    shortcut.WorkingDirectory = str(base_path)
    if icon_path.exists():
        shortcut.IconLocation = str(icon_path)
    shortcut.save()

    print(f"Desktop shortcut created at {shortcut_path}")

def posix_desktop_entry():
    import configparser

    script_path = BASE_PATH / "mcps3rtm"
    icon_path = BASE_PATH / "assets/logo512.png"
    desktop_file_path = Path.home() / ".local/share/applications/mcps3rtm.desktop"

    exec_cmd = f'{python_executable} {script_path} desktop'

    config = configparser.ConfigParser()
    config.optionxform = str
    config['Desktop Entry'] = {
        'Name': 'MCPS3RTM',
        'Comment': 'Run MCPS3RTM',
        'Exec': exec_cmd,
        'Icon': str(icon_path),
        'Terminal': 'true',
        'Type': 'Application',
        'Categories': 'Utility;',
        'StartupNotify': 'true'
    }

    desktop_file_path.parent.mkdir(parents=True, exist_ok=True)
    with open(desktop_file_path, 'w') as f:
        config.write(f, space_around_delimiters=False)
    desktop_file_path.chmod(0o755)
    print(f"Desktop file created at {desktop_file_path}")

def usage():
    print("Usage: mcps3rtm.py [cli|server|desktop|install] [args]")

if __name__ == "__main__":
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    mode = sys.argv[1].removesuffix(".py")
    args = sys.argv[2:] 

    exe_env = environment()

    
    if mode == "cli":
        cli = subprocess.run([exe_env, get_script_path("cli.py")] + args, cwd=str(BASE_PATH), 
    text=True)
        sys.exit(cli.returncode)
    elif mode == "server":
        from config import Config #import config after environment setup

        server = subprocess.run([
            exe_env, "-m", "streamlit", "run", get_script_path("server.py"),
            "--server.port", str(Config.get("streamlit.port")),
            "--server.address", str(Config.get("streamlit.address")),
        ] + args, cwd=str(BASE_PATH))
        sys.exit(server.returncode)
    elif mode == "desktop":
        desktop = subprocess.run([exe_env, get_script_path("desktop.py")] + args, cwd=str(BASE_PATH), text=True)
        sys.exit(desktop.returncode)
    elif mode == "install":
        if os.name == "nt":
            print("This application has not been tested on windows yet. If you encounter issues, please report them.")
            time.sleep(3)
            nt_desktop_entry()
        else:
            posix_desktop_entry()
    else:
        usage()
        sys.exit(1)
